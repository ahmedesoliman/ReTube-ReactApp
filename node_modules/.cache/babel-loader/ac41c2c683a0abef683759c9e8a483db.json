{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\retube-reactApp\\\\src\\\\components\\\\FullVideo\\\\Provider.tsx\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { setStorage, getStorage } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext({});\nconst KEY_LOCALSTORAGE = \"dbVolumeReact\";\nexport default class FullVideoProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleFullscreen = video => {\n      const videoElement = ReactDOM.findDOMNode(video);\n      const fullscreen = this.state.fullscreen;\n\n      if (fullscreen) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        }\n\n        this.setState({\n          fullscreen: false\n        });\n      } else {\n        if (videoElement && videoElement.parentElement) {\n          const fullvideoElement = videoElement.parentElement;\n\n          if (fullvideoElement.requestFullscreen) {\n            fullvideoElement.requestFullscreen();\n          } else if (fullvideoElement.webkitRequestFullscreen) {\n            fullvideoElement.webkitRequestFullscreen();\n          }\n\n          this.setState({\n            fullscreen: true\n          });\n        }\n      }\n    };\n\n    this.editing = editActive => {\n      this.setState({\n        editActive\n      });\n    };\n\n    this.editingValues = editActive => {\n      this.setState(editActive);\n    };\n\n    this.userActivate = userActivity => {\n      this.setState({\n        userActivity\n      });\n    };\n\n    this.playerActivate = isActive => {\n      this.setState({\n        isActive\n      });\n    };\n\n    this.seekingTime = time => {\n      this.setState({\n        seekingTime: time\n      });\n    };\n\n    this.endSeeking = () => {\n      this.setState({\n        seekingTime: 0\n      });\n    };\n\n    this.onLoadStart = videoProps => {\n      this.setState({ ...videoProps,\n        editActive: false,\n        ended: false,\n        hasStarted: false,\n        waiting: true\n      });\n    };\n\n    this.canPlay = videoProps => {\n      this.setState({ ...videoProps,\n        waiting: false\n      });\n    };\n\n    this.waiting = videoProps => {\n      this.setState({ ...videoProps,\n        waiting: true\n      });\n    };\n\n    this.playing = videoProps => {\n      this.setState({ ...videoProps,\n        waiting: false\n      });\n    };\n\n    this.play = videoProps => {\n      this.setState({ ...videoProps,\n        autoPaused: false,\n        ended: false,\n        hasStarted: true,\n        paused: false,\n        waiting: false\n      });\n    };\n\n    this.pause = videoProps => {\n      this.setState({ ...videoProps,\n        paused: true\n      });\n    };\n\n    this.end = videoProps => {\n      this.setState({ ...videoProps,\n        ended: true\n      });\n    };\n\n    this.seeking = videoProps => {\n      this.setState({ ...videoProps,\n        seeking: true\n      });\n    };\n\n    this.seeked = videoProps => {\n      this.setState({ ...videoProps,\n        seeking: false\n      });\n    };\n\n    this.changeVolume = videoProps => {\n      this.setState({ ...this.state,\n        ...videoProps\n      }, this.updateStorage);\n    };\n\n    this.reload = videoProps => {\n      const newState = { ...this.state,\n        ...videoProps\n      };\n\n      if (videoProps.paused === false) {\n        newState.hasStarted = true;\n        newState.waiting = false;\n      }\n\n      this.setState(newState);\n    };\n\n    this.updateStorage = () => {\n      setStorage(KEY_LOCALSTORAGE, this.state.volume);\n    };\n\n    let volume;\n    const volumeCache = getStorage(KEY_LOCALSTORAGE);\n\n    if (volumeCache !== undefined) {\n      volume = volumeCache;\n    } else {\n      volume = 1;\n      setStorage(KEY_LOCALSTORAGE, volume);\n    }\n\n    this.state = {\n      autoPaused: false,\n      buffered: null,\n      currentSrc: null,\n      currentTime: 0,\n      duration: 0,\n      editActive: false,\n      editMax: 0,\n      editMin: 0,\n      ended: false,\n      fullscreen: false,\n      hasStarted: false,\n      isActive: false,\n      muted: false,\n      paused: true,\n      readyState: 0,\n      seeking: false,\n      seekingTime: 0,\n      userActivity: false,\n      video: null,\n      videoHeight: 0,\n      videoWidth: 0,\n      volume,\n      waiting: false\n    };\n  }\n\n  render() {\n    const value = {\n      canPlay: this.canPlay,\n      changeVolume: this.changeVolume,\n      editing: this.editing,\n      editingValues: this.editingValues,\n      end: this.end,\n      endSeeking: this.endSeeking,\n      onLoadStart: this.onLoadStart,\n      pause: this.pause,\n      play: this.play,\n      playerActivate: this.playerActivate,\n      playing: this.playing,\n      provider: this.state,\n      reload: this.reload,\n      seeked: this.seeked,\n      seeking: this.seeking,\n      seekingTime: this.seekingTime,\n      toggleFullscreen: this.toggleFullscreen,\n      userActivate: this.userActivate,\n      waiting: this.waiting\n    };\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: value,\n      ...this.props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 12\n    }, this);\n  }\n\n}\nFullVideoProvider.Consumer = Context.Consumer;","map":{"version":3,"sources":["C:/gitHub/retube-reactApp/src/components/FullVideo/Provider.tsx"],"names":["React","ReactDOM","setStorage","getStorage","Context","createContext","KEY_LOCALSTORAGE","FullVideoProvider","Component","constructor","props","toggleFullscreen","video","videoElement","findDOMNode","fullscreen","state","document","exitFullscreen","webkitExitFullscreen","setState","parentElement","fullvideoElement","requestFullscreen","webkitRequestFullscreen","editing","editActive","editingValues","userActivate","userActivity","playerActivate","isActive","seekingTime","time","endSeeking","onLoadStart","videoProps","ended","hasStarted","waiting","canPlay","playing","play","autoPaused","paused","pause","end","seeking","seeked","changeVolume","updateStorage","reload","newState","volume","volumeCache","undefined","buffered","currentSrc","currentTime","duration","editMax","editMin","muted","readyState","videoHeight","videoWidth","render","value","provider","Consumer"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport Video from \"./Video\";\nimport { setStorage, getStorage } from \"../../utils\";\n\nconst Context = React.createContext({});\n\nconst KEY_LOCALSTORAGE = \"dbVolumeReact\";\n\ninterface IState {\n  autoPaused: boolean;\n  buffered: any;\n  currentSrc: any;\n  currentTime: number;\n  duration: number;\n  editActive: boolean;\n  editMax: number;\n  editMin: number;\n  ended: boolean;\n  fullscreen: boolean;\n  hasStarted: boolean;\n  isActive: boolean;\n  muted: boolean;\n  paused: boolean;\n  readyState: number;\n  seeking: boolean;\n  seekingTime: number;\n  userActivity: boolean;\n  video: any;\n  videoHeight: number;\n  videoWidth: number;\n  volume: number;\n  waiting: boolean;\n}\n\nexport interface IFullVideoProvider {\n  provider: IState;\n  editing: (ob: boolean) => any;\n  changeVolume: (ob: any) => any;\n  editingValues: (ob: any) => any;\n  userActivate: (ob: boolean) => any;\n  playerActivate: (ob: boolean) => any;\n  seekingTime: (ob: number) => any;\n  endSeeking: () => any;\n  toggleFullscreen: (video: Video) => any;\n  onLoadStart: (ob: any) => any;\n  canPlay: (ob: any) => any;\n  waiting: (ob: any) => any;\n  playing: (ob: any) => any;\n  play: (ob: any, autoPlay?: boolean) => any;\n  pause: (ob: any) => any;\n  end: (ob: any) => any;\n  seeked: (ob: any) => any;\n  seeking: (ob: any) => any;\n  reload: (ob: any) => any;\n}\n\nexport default class FullVideoProvider extends React.Component<any, IState> {\n  public static Consumer = Context.Consumer;\n\n  constructor(props: any) {\n    super(props);\n\n    let volume: number;\n    const volumeCache = getStorage(KEY_LOCALSTORAGE);\n    if (volumeCache !== undefined) {\n      volume = volumeCache;\n    } else {\n      volume = 1;\n      setStorage(KEY_LOCALSTORAGE, volume);\n    }\n    this.state = {\n      autoPaused: false,\n      buffered: null,\n      currentSrc: null,\n      currentTime: 0,\n      duration: 0,\n      editActive: false,\n      editMax: 0,\n      editMin: 0,\n      ended: false,\n      fullscreen: false,\n      hasStarted: false,\n      isActive: false,\n      muted: false,\n      paused: true,\n      readyState: 0,\n      seeking: false,\n      seekingTime: 0,\n      userActivity: false,\n      video: null,\n      videoHeight: 0,\n      videoWidth: 0,\n      volume,\n      waiting: false\n    };\n  }\n\n  public toggleFullscreen = (video: Video) => {\n    const videoElement = ReactDOM.findDOMNode(video);\n    const fullscreen = this.state.fullscreen;\n    if (fullscreen) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n      this.setState({ fullscreen: false });\n    } else {\n      if (videoElement && videoElement.parentElement) {\n        const fullvideoElement = videoElement.parentElement;\n        if (fullvideoElement.requestFullscreen) {\n          fullvideoElement.requestFullscreen();\n        } else if (fullvideoElement.webkitRequestFullscreen) {\n          fullvideoElement.webkitRequestFullscreen();\n        }\n        this.setState({ fullscreen: true });\n      }\n    }\n  };\n\n  public editing = (editActive: boolean) => {\n    this.setState({ editActive });\n  };\n\n  public editingValues = (editActive: { editMin: number; editMax: number }) => {\n    this.setState(editActive);\n  };\n\n  public userActivate = (userActivity: boolean) => {\n    this.setState({ userActivity });\n  };\n\n  public playerActivate = (isActive: boolean) => {\n    this.setState({ isActive });\n  };\n\n  public seekingTime = (time: number) => {\n    this.setState({ seekingTime: time });\n  };\n\n  public endSeeking = () => {\n    this.setState({ seekingTime: 0 });\n  };\n\n  public onLoadStart = (videoProps: any) => {\n    this.setState({\n      ...videoProps,\n      editActive: false,\n      ended: false,\n      hasStarted: false,\n      waiting: true\n    });\n  };\n\n  public canPlay = (videoProps: any) => {\n    this.setState({ ...videoProps, waiting: false });\n  };\n\n  public waiting = (videoProps: any) => {\n    this.setState({ ...videoProps, waiting: true });\n  };\n\n  public playing = (videoProps: any) => {\n    this.setState({ ...videoProps, waiting: false });\n  };\n\n  public play = (videoProps: any) => {\n    this.setState({\n      ...videoProps,\n      autoPaused: false,\n      ended: false,\n      hasStarted: true,\n      paused: false,\n      waiting: false\n    });\n  };\n\n  public pause = (videoProps: any) => {\n    this.setState({ ...videoProps, paused: true });\n  };\n\n  public end = (videoProps: any) => {\n    this.setState({ ...videoProps, ended: true });\n  };\n\n  public seeking = (videoProps: any) => {\n    this.setState({ ...videoProps, seeking: true });\n  };\n\n  public seeked = (videoProps: any) => {\n    this.setState({ ...videoProps, seeking: false });\n  };\n\n  public changeVolume = (videoProps: any) => {\n    this.setState(\n      {\n        ...this.state,\n        ...videoProps\n      },\n      this.updateStorage\n    );\n  };\n\n  public reload = (videoProps: any) => {\n    const newState = {\n      ...this.state,\n      ...videoProps\n    };\n    if (videoProps.paused === false) {\n      newState.hasStarted = true;\n      newState.waiting = false;\n    }\n    this.setState(newState);\n  };\n\n  public render() {\n    const value: IFullVideoProvider = {\n      canPlay: this.canPlay,\n      changeVolume: this.changeVolume,\n      editing: this.editing,\n      editingValues: this.editingValues,\n      end: this.end,\n      endSeeking: this.endSeeking,\n      onLoadStart: this.onLoadStart,\n      pause: this.pause,\n      play: this.play,\n      playerActivate: this.playerActivate,\n      playing: this.playing,\n      provider: this.state,\n      reload: this.reload,\n      seeked: this.seeked,\n      seeking: this.seeking,\n      seekingTime: this.seekingTime,\n      toggleFullscreen: this.toggleFullscreen,\n      userActivate: this.userActivate,\n      waiting: this.waiting\n    };\n    return <Context.Provider value={value} {...this.props} />;\n  }\n\n  private updateStorage = () => {\n    setStorage(KEY_LOCALSTORAGE, this.state.volume);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}