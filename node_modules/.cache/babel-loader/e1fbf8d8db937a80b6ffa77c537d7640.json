{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\todolist-react\\\\src\\\\container\\\\MobileVideo\\\\MobileVideo.tsx\";\nimport * as React from \"react\";\nimport { withRouter } from \"react-router\";\nimport { FullVideo } from \"../../components\";\nimport AppProvider from \"../../AppProvider\";\nimport { findVideoClipIndexForId, getPlaylistActions } from \"../../utils\";\nimport { MobileVideoStyled, MobileVideoCloseStyled } from \"./styles\";\nimport { VideoPlayStyled } from \"../../components/VideoPlayer/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MobileVideo = withRouter(_c = props => {\n  const {\n    playlist,\n    idVideo,\n    inFullPlayer,\n    autoPlaylist,\n    setAutoPlaylist,\n    repeat,\n    random\n  } = props;\n  const showControls = inFullPlayer;\n\n  const changeVideo = id => {\n    props.history.push(\"/video/\" + id);\n  };\n\n  const handlePlaylistAction = videoClip => {\n    changeVideo(videoClip.id);\n  };\n\n  const handleClick = () => {\n    if (!showControls) {\n      changeVideo(props.idVideo);\n    }\n  };\n\n  const handleClose = () => {\n    props.setIdVideo(\"\");\n  };\n\n  const propsFullVideo = {\n    autoPlay: true,\n    onChangeAutoPlaylist: setAutoPlaylist,\n    onClickPlaylistAction: handlePlaylistAction,\n    showControls\n  };\n\n  if (idVideo !== \"\") {\n    const index = findVideoClipIndexForId(playlist, idVideo);\n    const {\n      nextVideoClip,\n      backVideoClip,\n      currentVideoClip\n    } = getPlaylistActions(index, playlist, repeat, random);\n    propsFullVideo.autoPlaylist = nextVideoClip ? autoPlaylist : false;\n    propsFullVideo.currentVideoClip = currentVideoClip;\n    propsFullVideo.backVideoClip = backVideoClip;\n    propsFullVideo.nextVideoClip = nextVideoClip;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MobileVideoStyled, {\n    top: inFullPlayer,\n    hidden: idVideo === \"\",\n    children: [/*#__PURE__*/_jsxDEV(MobileVideoCloseStyled, {\n      onClick: handleClose,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-times\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoPlayStyled, {\n      onClick: handleClick,\n      children: /*#__PURE__*/_jsxDEV(FullVideo, { ...propsFullVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n});\n_c2 = MobileVideo;\nexport default (() => /*#__PURE__*/_jsxDEV(AppProvider.Consumer, {\n  children: value => /*#__PURE__*/_jsxDEV(MobileVideo, { ...value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 31\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 3\n}, this));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MobileVideo$withRouter\");\n$RefreshReg$(_c2, \"MobileVideo\");","map":{"version":3,"sources":["C:/gitHub/todolist-react/src/container/MobileVideo/MobileVideo.tsx"],"names":["React","withRouter","FullVideo","AppProvider","findVideoClipIndexForId","getPlaylistActions","MobileVideoStyled","MobileVideoCloseStyled","VideoPlayStyled","MobileVideo","props","playlist","idVideo","inFullPlayer","autoPlaylist","setAutoPlaylist","repeat","random","showControls","changeVideo","id","history","push","handlePlaylistAction","videoClip","handleClick","handleClose","setIdVideo","propsFullVideo","autoPlay","onChangeAutoPlaylist","onClickPlaylistAction","index","nextVideoClip","backVideoClip","currentVideoClip","value"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAAuD,kBAAvD;AACA,OAAOC,WAAP,MAA0C,mBAA1C;AAEA,SAEEC,uBAFF,EAGEC,kBAHF,QAIO,aAJP;AAKA,SAASC,iBAAT,EAA4BC,sBAA5B,QAA0D,UAA1D;AACA,SAASC,eAAT,QAAgC,qCAAhC;;AAIA,MAAMC,WAAW,GAAGR,UAAU,MAAES,KAAD,IAAmB;AAChD,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,eALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;AASA,QAAMQ,YAAY,GAAGL,YAArB;;AAEA,QAAMM,WAAW,GAAIC,EAAD,IAAgB;AAClCV,IAAAA,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmB,YAAYF,EAA/B;AACD,GAFD;;AAIA,QAAMG,oBAAoB,GAAIC,SAAD,IAA2B;AACtDL,IAAAA,WAAW,CAACK,SAAS,CAACJ,EAAX,CAAX;AACD,GAFD;;AAIA,QAAMK,WAAW,GAAG,MAAM;AACxB,QAAI,CAACP,YAAL,EAAmB;AACjBC,MAAAA,WAAW,CAACT,KAAK,CAACE,OAAP,CAAX;AACD;AACF,GAJD;;AAMA,QAAMc,WAAW,GAAG,MAAM;AACxBhB,IAAAA,KAAK,CAACiB,UAAN,CAAiB,EAAjB;AACD,GAFD;;AAIA,QAAMC,cAA+B,GAAG;AACtCC,IAAAA,QAAQ,EAAE,IAD4B;AAEtCC,IAAAA,oBAAoB,EAAEf,eAFgB;AAGtCgB,IAAAA,qBAAqB,EAAER,oBAHe;AAItCL,IAAAA;AAJsC,GAAxC;;AAOA,MAAIN,OAAO,KAAK,EAAhB,EAAoB;AAClB,UAAMoB,KAAK,GAAG5B,uBAAuB,CAACO,QAAD,EAAWC,OAAX,CAArC;AACA,UAAM;AACJqB,MAAAA,aADI;AAEJC,MAAAA,aAFI;AAGJC,MAAAA;AAHI,QAIF9B,kBAAkB,CAAC2B,KAAD,EAAQrB,QAAR,EAAkBK,MAAlB,EAA0BC,MAA1B,CAJtB;AAMAW,IAAAA,cAAc,CAACd,YAAf,GAA8BmB,aAAa,GAAGnB,YAAH,GAAkB,KAA7D;AACAc,IAAAA,cAAc,CAACO,gBAAf,GAAkCA,gBAAlC;AACAP,IAAAA,cAAc,CAACM,aAAf,GAA+BA,aAA/B;AACAN,IAAAA,cAAc,CAACK,aAAf,GAA+BA,aAA/B;AACD;;AAED,sBACE,QAAC,iBAAD;AAAmB,IAAA,GAAG,EAAEpB,YAAxB;AAAsC,IAAA,MAAM,EAAED,OAAO,KAAK,EAA1D;AAAA,4BACE,QAAC,sBAAD;AAAwB,MAAA,OAAO,EAAEc,WAAjC;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAED,WAA1B;AAAA,6BACE,QAAC,SAAD,OAAeG;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA7D6B,CAA9B;MAAMnB,W;AA+DN,gBAAe,mBACb,QAAC,WAAD,CAAa,QAAb;AAAA,YACI2B,KAAD,iBAAyB,QAAC,WAAD,OAAiBA;AAAjB;AAAA;AAAA;AAAA;AAAA;AAD5B;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport { FullVideo, IFullVideoProps, IVideoClip } from \"../../components\";\nimport AppProvider, { IAppProvider } from \"../../AppProvider\";\n\nimport {\n  findVideoClipForId,\n  findVideoClipIndexForId,\n  getPlaylistActions\n} from \"../../utils\";\nimport { MobileVideoStyled, MobileVideoCloseStyled } from \"./styles\";\nimport { VideoPlayStyled } from \"../../components/VideoPlayer/styles\";\n\ninterface IProps extends RouteComponentProps<any>, IAppProvider {}\n\nconst MobileVideo = withRouter((props: IProps) => {\n  const {\n    playlist,\n    idVideo,\n    inFullPlayer,\n    autoPlaylist,\n    setAutoPlaylist,\n    repeat,\n    random\n  } = props;\n  const showControls = inFullPlayer;\n\n  const changeVideo = (id: string) => {\n    props.history.push(\"/video/\" + id);\n  };\n\n  const handlePlaylistAction = (videoClip: IVideoClip) => {\n    changeVideo(videoClip.id);\n  };\n\n  const handleClick = () => {\n    if (!showControls) {\n      changeVideo(props.idVideo);\n    }\n  };\n\n  const handleClose = () => {\n    props.setIdVideo(\"\");\n  };\n\n  const propsFullVideo: IFullVideoProps = {\n    autoPlay: true,\n    onChangeAutoPlaylist: setAutoPlaylist,\n    onClickPlaylistAction: handlePlaylistAction,\n    showControls\n  };\n\n  if (idVideo !== \"\") {\n    const index = findVideoClipIndexForId(playlist, idVideo);\n    const {\n      nextVideoClip,\n      backVideoClip,\n      currentVideoClip\n    } = getPlaylistActions(index, playlist, repeat, random);\n\n    propsFullVideo.autoPlaylist = nextVideoClip ? autoPlaylist : false;\n    propsFullVideo.currentVideoClip = currentVideoClip;\n    propsFullVideo.backVideoClip = backVideoClip;\n    propsFullVideo.nextVideoClip = nextVideoClip;\n  }\n\n  return (\n    <MobileVideoStyled top={inFullPlayer} hidden={idVideo === \"\"}>\n      <MobileVideoCloseStyled onClick={handleClose}>\n        <i className=\"fas fa-times\" />\n      </MobileVideoCloseStyled>\n      <VideoPlayStyled onClick={handleClick}>\n        <FullVideo {...propsFullVideo} />\n      </VideoPlayStyled>\n    </MobileVideoStyled>\n  );\n});\n\nexport default () => (\n  <AppProvider.Consumer>\n    {(value: IAppProvider) => <MobileVideo {...value} />}\n  </AppProvider.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}