{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\retube-reactApp\\\\src\\\\screens\\\\Edit\\\\EditForm.tsx\";\n\n/**\n * Disclaimer: It is also possible using react-final-form\n * but I wanted to do a demonstration without using a form composition framework\n */\nimport * as React from \"react\";\nimport { InputLabel, ButtonPrimaryStyled, FormStyled } from \"../../components\";\nimport { validRequired, validImageURL, validTime, validVideoURL, getTime, parseFormtoPlaylist } from \"./utils\";\nimport { formatTime } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EditForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      complete: {},\n      errors: {},\n      form: {\n        endTime: \"\",\n        image: \"\",\n        startTime: \"\",\n        tags: [],\n        title: \"\",\n        video: \"\"\n      },\n      loading: {},\n      submitted: false,\n      success: false\n    };\n\n    this.handleChange = (property, value) => {\n      this.setState({\n        form: { ...this.state.form,\n          [property]: value\n        }\n      }, () => {\n        if (this.state.submitted) {\n          this.validForm();\n        }\n      });\n    };\n\n    this.validForm = successCb => {\n      const form = this.state.form;\n      const errors = {};\n      Object.keys(form).forEach(key => {\n        const value = form[key];\n\n        if (typeof value === \"string\") {\n          if (!validRequired(value)) {\n            errors[key] = \"This field is requeried\";\n          }\n        }\n      });\n      const {\n        startTime,\n        endTime,\n        video,\n        image\n      } = form;\n      let startTimeSeconds;\n      let endTimeSeconds;\n\n      if (!errors.startTime) {\n        if (validTime(startTime)) {\n          startTimeSeconds = getTime(startTime);\n        } else {\n          errors.startTime = \"Complete this field correctly\";\n        }\n      }\n\n      if (!errors.endTime) {\n        if (validTime(endTime)) {\n          endTimeSeconds = getTime(endTime);\n        } else {\n          errors.endTime = \"Complete this field correctly\";\n        }\n      }\n\n      if (!errors.startTime && !errors.endTime && startTimeSeconds >= endTimeSeconds) {\n        errors.endTime = \"The end time must be greater than the start time\";\n      }\n\n      if (!errors.image) {\n        if (!validImageURL(image)) {\n          errors.image = \"It must be a valid image URL (.jpeg .jpg .gif .png)\";\n        }\n      }\n\n      if (!errors.video) {\n        if (!validVideoURL(video)) {\n          errors.video = \"It must be a valid video URL (.mp4)\";\n        }\n      }\n\n      this.setState({\n        errors\n      }, () => {\n        if (successCb) {\n          successCb();\n        }\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        submitted: true\n      });\n      this.validForm(() => {\n        const isThereErrors = Object.keys(this.state.errors).length;\n\n        if (!isThereErrors) {\n          this.setState({\n            success: true\n          });\n          this.props.onSuccess(parseFormtoPlaylist(this.state.form));\n        }\n      });\n    };\n\n    this.handleBack = () => {\n      this.props.history.push(\"/\");\n    };\n\n    const playlist = props.playlist || {};\n    this.state = {\n      complete: {},\n      errors: {},\n      form: {\n        endTime: formatTime(playlist.endTime, 3600) || \"\",\n        image: playlist.image || \"\",\n        startTime: formatTime(playlist.startTime, 3600) || \"\",\n        tags: playlist.tags || [],\n        title: playlist.title || \"\",\n        video: playlist.src || \"\"\n      },\n      loading: {},\n      submitted: false,\n      success: false\n    };\n  }\n\n  render() {\n    const {\n      form: {\n        title,\n        image,\n        endTime,\n        startTime,\n        video,\n        tags\n      },\n      loading,\n      complete,\n      success,\n      errors\n    } = this.state;\n    const playlist = this.props.playlist;\n    const errorsForm = errors; // Fix typescript\n\n    const loadingForm = loading; // Fix typescript\n\n    const completeForm = complete; // Fix typescript\n\n    return success ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: playlist ? \"The video was updated successfully\" : \"The video was added successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPrimaryStyled, {\n        onClick: this.handleBack,\n        type: \"submit\",\n        children: \"Go home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(FormStyled, {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        label: \"Title*\",\n        value: title,\n        error: errorsForm.title,\n        onChange: this.handleChange.bind(null, \"title\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        label: \"Image URL*\",\n        value: image,\n        error: errorsForm.image,\n        loading: loadingForm.image,\n        complete: completeForm.image,\n        onChange: this.handleChange.bind(null, \"image\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        label: \"Video URL*\",\n        value: video,\n        error: errorsForm.video,\n        loading: loadingForm.video,\n        complete: completeForm.video,\n        onChange: this.handleChange.bind(null, \"video\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        type: \"time\",\n        label: \"Start time (hh:mm:ss)*\",\n        value: startTime,\n        error: errorsForm.startTime,\n        onChange: this.handleChange.bind(null, \"startTime\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        type: \"time\",\n        label: \"End time (hh:mm:ss)*\",\n        value: endTime,\n        error: errorsForm.endTime,\n        onChange: this.handleChange.bind(null, \"endTime\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        type: \"tags\",\n        label: \"Tags\",\n        value: tags,\n        error: errorsForm.tags,\n        onChange: this.handleChange.bind(null, \"tags\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPrimaryStyled, {\n        onClick: this.handleSubmit,\n        type: \"submit\",\n        children: playlist ? \"Save in LocalStorage\" : \"Add in Localstorage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/gitHub/retube-reactApp/src/screens/Edit/EditForm.tsx"],"names":["React","InputLabel","ButtonPrimaryStyled","FormStyled","validRequired","validImageURL","validTime","validVideoURL","getTime","parseFormtoPlaylist","formatTime","EditForm","Component","constructor","props","state","complete","errors","form","endTime","image","startTime","tags","title","video","loading","submitted","success","handleChange","property","value","setState","validForm","successCb","Object","keys","forEach","key","startTimeSeconds","endTimeSeconds","handleSubmit","e","preventDefault","isThereErrors","length","onSuccess","handleBack","history","push","playlist","src","render","errorsForm","loadingForm","completeForm","bind"],"mappings":"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","sourcesContent":["/**\n * Disclaimer: It is also possible using react-final-form\n * but I wanted to do a demonstration without using a form composition framework\n */\n\nimport * as React from \"react\";\nimport {\n  InputLabel,\n  IVideoClip,\n  ButtonPrimaryStyled,\n  FormStyled\n} from \"../../components\";\nimport {\n  validRequired,\n  validImageURL,\n  validTime,\n  validVideoURL,\n  getTime,\n  parseFormtoPlaylist\n} from \"./utils\";\nimport { formatTime } from \"../../utils\";\nimport { History } from \"history\";\nimport { IForm } from \"./type\";\n\ninterface IProps {\n  history: History;\n  onSuccess: (playlist: IVideoClip) => void;\n  playlist?: IVideoClip;\n  onSubmit?: () => void;\n}\n\nexport default class EditForm extends React.Component<IProps> {\n  public state = {\n    complete: {},\n    errors: {},\n    form: {\n      endTime: \"\",\n      image: \"\",\n      startTime: \"\",\n      tags: [],\n      title: \"\",\n      video: \"\"\n    },\n    loading: {},\n    submitted: false,\n    success: false\n  };\n\n  constructor(props: IProps) {\n    super(props);\n\n    const playlist: any = props.playlist || {};\n\n    this.state = {\n      complete: {},\n      errors: {},\n      form: {\n        endTime: formatTime(playlist.endTime, 3600) || \"\",\n        image: playlist.image || \"\",\n        startTime: formatTime(playlist.startTime, 3600) || \"\",\n        tags: playlist.tags || [],\n        title: playlist.title || \"\",\n        video: playlist.src || \"\"\n      },\n      loading: {},\n      submitted: false,\n      success: false\n    };\n  }\n\n  public handleChange = (property, value) => {\n    this.setState(\n      {\n        form: {\n          ...this.state.form,\n          [property]: value\n        }\n      },\n      () => {\n        if (this.state.submitted) {\n          this.validForm();\n        }\n      }\n    );\n  };\n\n  public validForm = (successCb?: () => void) => {\n    const form: IForm = this.state.form;\n    const errors: IForm = {};\n\n    Object.keys(form).forEach(key => {\n      const value = form[key];\n      if (typeof value === \"string\") {\n        if (!validRequired(value)) {\n          errors[key] = \"This field is requeried\";\n        }\n      }\n    });\n\n    const { startTime, endTime, video, image } = form;\n\n    let startTimeSeconds;\n    let endTimeSeconds;\n\n    if (!errors.startTime) {\n      if (validTime(startTime)) {\n        startTimeSeconds = getTime(startTime);\n      } else {\n        errors.startTime = \"Complete this field correctly\";\n      }\n    }\n\n    if (!errors.endTime) {\n      if (validTime(endTime)) {\n        endTimeSeconds = getTime(endTime);\n      } else {\n        errors.endTime = \"Complete this field correctly\";\n      }\n    }\n\n    if (\n      !errors.startTime &&\n      !errors.endTime &&\n      startTimeSeconds >= endTimeSeconds\n    ) {\n      errors.endTime = \"The end time must be greater than the start time\";\n    }\n\n    if (!errors.image) {\n      if (!validImageURL(image)) {\n        errors.image = \"It must be a valid image URL (.jpeg .jpg .gif .png)\";\n      }\n    }\n\n    if (!errors.video) {\n      if (!validVideoURL(video)) {\n        errors.video = \"It must be a valid video URL (.mp4)\";\n      }\n    }\n\n    this.setState(\n      {\n        errors\n      },\n      () => {\n        if (successCb) {\n          successCb();\n        }\n      }\n    );\n  };\n\n  public handleSubmit = e => {\n    e.preventDefault();\n\n    this.setState({ submitted: true });\n    this.validForm(() => {\n      const isThereErrors = Object.keys(this.state.errors).length;\n      if (!isThereErrors) {\n        this.setState({\n          success: true\n        });\n        this.props.onSuccess(parseFormtoPlaylist(this.state.form));\n      }\n    });\n  };\n\n  public handleBack = () => {\n    this.props.history.push(\"/\");\n  };\n\n  public render() {\n    const {\n      form: { title, image, endTime, startTime, video, tags },\n      loading,\n      complete,\n      success,\n      errors\n    } = this.state;\n    const playlist = this.props.playlist;\n    const errorsForm: any = errors; // Fix typescript\n    const loadingForm: any = loading; // Fix typescript\n    const completeForm: any = complete; // Fix typescript\n\n    return success ? (\n      <div>\n        <p>\n          {playlist\n            ? \"The video was updated successfully\"\n            : \"The video was added successfully\"}\n        </p>\n        <ButtonPrimaryStyled onClick={this.handleBack} type=\"submit\">\n          Go home\n        </ButtonPrimaryStyled>\n      </div>\n    ) : (\n      <FormStyled onSubmit={this.handleSubmit}>\n        <InputLabel\n          label=\"Title*\"\n          value={title}\n          error={errorsForm.title}\n          onChange={this.handleChange.bind(null, \"title\")}\n        />\n        <InputLabel\n          label=\"Image URL*\"\n          value={image}\n          error={errorsForm.image}\n          loading={loadingForm.image}\n          complete={completeForm.image}\n          onChange={this.handleChange.bind(null, \"image\")}\n        />\n        <InputLabel\n          label=\"Video URL*\"\n          value={video}\n          error={errorsForm.video}\n          loading={loadingForm.video}\n          complete={completeForm.video}\n          onChange={this.handleChange.bind(null, \"video\")}\n        />\n        <InputLabel\n          type=\"time\"\n          label=\"Start time (hh:mm:ss)*\"\n          value={startTime}\n          error={errorsForm.startTime}\n          onChange={this.handleChange.bind(null, \"startTime\")}\n        />\n        <InputLabel\n          type=\"time\"\n          label=\"End time (hh:mm:ss)*\"\n          value={endTime}\n          error={errorsForm.endTime}\n          onChange={this.handleChange.bind(null, \"endTime\")}\n        />\n        <InputLabel\n          type=\"tags\"\n          label=\"Tags\"\n          value={tags}\n          error={errorsForm.tags}\n          onChange={this.handleChange.bind(null, \"tags\")}\n        />\n        <ButtonPrimaryStyled onClick={this.handleSubmit} type=\"submit\">\n          {playlist ? \"Save in LocalStorage\" : \"Add in Localstorage\"}\n        </ButtonPrimaryStyled>\n      </FormStyled>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}