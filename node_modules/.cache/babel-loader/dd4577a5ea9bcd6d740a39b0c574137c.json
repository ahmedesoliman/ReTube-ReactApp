{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\todolist-react\\\\src\\\\components\\\\FullVideo\\\\Video.tsx\";\nimport * as React from \"react\";\nimport { mediaProperties } from \"./consts\";\nimport { showSpinnerNextVideo } from \"../../utils\";\nimport { VideoStyled, VideoWrapperStyled } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Video extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.video = void 0;\n\n    this.play = () => {\n      const {\n        currentVideoClip: {\n          endTime,\n          startTime\n        },\n        provider: {\n          duration\n        }\n      } = this.props;\n      const fixEndTime = endTime > duration ? duration : endTime;\n\n      if (this.video.currentTime >= fixEndTime || this.video.currentTime <= startTime) {\n        this.video.currentTime = startTime;\n      }\n\n      this.video.play();\n    };\n\n    this.pause = () => {\n      this.video.pause();\n    };\n\n    this.togglePlay = () => {\n      if (this.video.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    };\n\n    this.seek = time => {\n      try {\n        this.video.currentTime = time;\n      } catch (e) {//\n      }\n    };\n\n    this.forward = seconds => {\n      const {\n        currentVideoClip: {\n          endTime,\n          startTime\n        }\n      } = this.props;\n      let finalCurrentTime = this.video.currentTime + seconds;\n\n      if (finalCurrentTime >= endTime) {\n        finalCurrentTime = startTime;\n      } else if (finalCurrentTime <= startTime) {\n        finalCurrentTime = endTime;\n      }\n\n      this.seek(finalCurrentTime);\n    };\n\n    this.replay = seconds => {\n      this.forward(-seconds);\n    };\n\n    this.handleLoadStart = () => {\n      const {\n        onLoadStart,\n        currentVideoClip: {\n          startTime\n        }\n      } = this.props;\n      onLoadStart(this.getVideo());\n      this.video.currentTime = startTime || 0;\n    };\n\n    this.handleCanPlay = () => {\n      this.props.canPlay(this.getVideo());\n    };\n\n    this.handlePlaying = () => {\n      this.props.playing(this.getVideo());\n    };\n\n    this.handlePlay = () => {\n      this.props.play(this.getVideo());\n    };\n\n    this.handlePause = () => {\n      this.props.pause(this.getVideo());\n    };\n\n    this.handleDurationChange = () => {\n      this.props.reload(this.getVideo());\n    };\n\n    this.handleProgress = () => {\n      if (this.video) {\n        this.props.reload(this.getVideo());\n      }\n    };\n\n    this.handleEnded = () => {\n      const {\n        end\n      } = this.props;\n      end(this.getVideo());\n    };\n\n    this.handleWaiting = () => {\n      this.props.waiting(this.getVideo());\n    };\n\n    this.handleSeeking = () => {\n      this.props.seeking(this.getVideo());\n    };\n\n    this.handleSeeked = () => {\n      this.props.seeked(this.getVideo());\n    };\n\n    this.handleEmptied = () => {\n      this.props.reload(this.getVideo());\n    };\n\n    this.handleLoadedMetaData = () => {\n      const {\n        currentVideoClip: {\n          startTime\n        },\n        reload\n      } = this.props;\n\n      if (startTime && startTime > 0) {\n        this.video.currentTime = startTime;\n      }\n\n      reload(this.getVideo());\n    };\n\n    this.handleLoadedData = () => {\n      this.props.reload(this.getVideo());\n    };\n\n    this.handleTimeUpdate = () => {\n      const {\n        reload,\n        currentVideoClip: {\n          endTime\n        }\n      } = this.props;\n\n      if (this.video.currentTime >= endTime) {\n        this.pause();\n      }\n\n      reload(this.getVideo());\n    };\n\n    this.handleVolumeChange = () => {\n      this.props.changeVolume(this.getVideo());\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Bug when try to repeat the same video with different id\n    const {\n      currentVideoClip: {\n        id,\n        src\n      }\n    } = this.props;\n\n    if (nextProps.currentVideoClip.id !== id && nextProps.currentVideoClip.src === src) {\n      this.video.currentTime = nextProps.currentVideoClip.startTime;\n      this.play();\n    }\n  }\n\n  componentDidMount() {\n    this.volume = this.props.provider.volume;\n  }\n\n  getVideo() {\n    if (!this.video) {\n      return null;\n    }\n\n    return mediaProperties.reduce((properties, key) => {\n      properties[key] = this.video[key];\n      return properties;\n    }, {});\n  }\n\n  get muted() {\n    return this.video.muted;\n  }\n\n  set muted(val) {\n    this.video.muted = val;\n  }\n\n  get volume() {\n    return this.video.volume;\n  }\n\n  set volume(val) {\n    if (val > 1) {\n      val = 1;\n    }\n\n    if (val < 0) {\n      val = 0;\n    }\n\n    this.video.volume = val;\n  }\n\n  render() {\n    const {\n      autoPlay = false,\n      currentVideoClip: {\n        src,\n        endTime\n      },\n      autoPlaylist,\n      provider: {\n        currentTime,\n        duration,\n        fullscreen\n      }\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(VideoWrapperStyled, {\n      fullscreen: fullscreen,\n      show: !showSpinnerNextVideo(currentTime, endTime, duration, autoPlaylist),\n      children: /*#__PURE__*/_jsxDEV(VideoStyled // tslint:disable-next-line:jsx-no-lambda\n      , {\n        innerRef: c => {\n          this.video = c;\n        },\n        autoPlay: autoPlay,\n        src: src,\n        playsinline: true,\n        preload: \"auto\",\n        onLoadStart: this.handleLoadStart,\n        onWaiting: this.handleWaiting,\n        onCanPlay: this.handleCanPlay,\n        onPlaying: this.handlePlaying,\n        onEnded: this.handleEnded,\n        onSeeking: this.handleSeeking,\n        onSeeked: this.handleSeeked,\n        onPlay: this.handlePlay,\n        onPause: this.handlePause,\n        onProgress: this.handleProgress,\n        onDurationChange: this.handleDurationChange,\n        onEmptied: this.handleEmptied,\n        onLoadedMetadata: this.handleLoadedMetaData,\n        onLoadedData: this.handleLoadedData,\n        onTimeUpdate: this.handleTimeUpdate,\n        onVolumeChange: this.handleVolumeChange,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/gitHub/todolist-react/src/components/FullVideo/Video.tsx"],"names":["React","mediaProperties","showSpinnerNextVideo","VideoStyled","VideoWrapperStyled","Video","Component","video","play","currentVideoClip","endTime","startTime","provider","duration","props","fixEndTime","currentTime","pause","togglePlay","paused","seek","time","e","forward","seconds","finalCurrentTime","replay","handleLoadStart","onLoadStart","getVideo","handleCanPlay","canPlay","handlePlaying","playing","handlePlay","handlePause","handleDurationChange","reload","handleProgress","handleEnded","end","handleWaiting","waiting","handleSeeking","seeking","handleSeeked","seeked","handleEmptied","handleLoadedMetaData","handleLoadedData","handleTimeUpdate","handleVolumeChange","changeVolume","componentWillReceiveProps","nextProps","id","src","componentDidMount","volume","reduce","properties","key","muted","val","render","autoPlay","autoPlaylist","fullscreen","c","children"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { mediaProperties } from \"./consts\";\nimport { IProps as IPropsFromPlayer } from \"./FullVideo\";\nimport { showSpinnerNextVideo } from \"../../utils\";\nimport { VideoStyled, VideoWrapperStyled } from \"./styles\";\n\nexport interface IProps extends IPropsFromPlayer {\n  children?: any;\n}\n\nexport default class Video extends React.Component<IProps> {\n  public video: HTMLVideoElement;\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    // Bug when try to repeat the same video with different id\n    const {\n      currentVideoClip: { id, src }\n    } = this.props;\n    if (\n      nextProps.currentVideoClip.id !== id &&\n      nextProps.currentVideoClip.src === src\n    ) {\n      this.video.currentTime = nextProps.currentVideoClip.startTime;\n      this.play();\n    }\n  }\n\n  public componentDidMount() {\n    this.volume = this.props.provider.volume;\n  }\n\n  public getVideo() {\n    if (!this.video) {\n      return null;\n    }\n\n    return mediaProperties.reduce((properties, key) => {\n      properties[key] = this.video[key];\n      return properties;\n    }, {});\n  }\n\n  get muted() {\n    return this.video.muted;\n  }\n\n  set muted(val) {\n    this.video.muted = val;\n  }\n\n  get volume() {\n    return this.video.volume;\n  }\n\n  set volume(val) {\n    if (val > 1) {\n      val = 1;\n    }\n    if (val < 0) {\n      val = 0;\n    }\n    this.video.volume = val;\n  }\n\n  public play = () => {\n    const {\n      currentVideoClip: { endTime, startTime },\n      provider: { duration }\n    } = this.props;\n    const fixEndTime = endTime > duration ? duration : endTime;\n    if (\n      this.video.currentTime >= fixEndTime ||\n      this.video.currentTime <= startTime\n    ) {\n      this.video.currentTime = startTime;\n    }\n    this.video.play();\n  };\n\n  public pause = () => {\n    this.video.pause();\n  };\n\n  public togglePlay = () => {\n    if (this.video.paused) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  };\n\n  public seek = (time: number) => {\n    try {\n      this.video.currentTime = time;\n    } catch (e) {\n      //\n    }\n  };\n\n  public forward = (seconds: number) => {\n    const {\n      currentVideoClip: { endTime, startTime }\n    } = this.props;\n    let finalCurrentTime = this.video.currentTime + seconds;\n    if (finalCurrentTime >= endTime) {\n      finalCurrentTime = startTime;\n    } else if (finalCurrentTime <= startTime) {\n      finalCurrentTime = endTime;\n    }\n    this.seek(finalCurrentTime);\n  };\n\n  public replay = (seconds: number) => {\n    this.forward(-seconds);\n  };\n\n  public handleLoadStart = () => {\n    const {\n      onLoadStart,\n      currentVideoClip: { startTime }\n    } = this.props;\n    onLoadStart(this.getVideo());\n\n    this.video.currentTime = startTime || 0;\n  };\n\n  public handleCanPlay = () => {\n    this.props.canPlay(this.getVideo());\n  };\n\n  public handlePlaying = () => {\n    this.props.playing(this.getVideo());\n  };\n\n  public handlePlay = () => {\n    this.props.play(this.getVideo());\n  };\n\n  public handlePause = () => {\n    this.props.pause(this.getVideo());\n  };\n\n  public handleDurationChange = () => {\n    this.props.reload(this.getVideo());\n  };\n\n  public handleProgress = () => {\n    if (this.video) {\n      this.props.reload(this.getVideo());\n    }\n  };\n\n  public handleEnded = () => {\n    const { end } = this.props;\n    end(this.getVideo());\n  };\n\n  public handleWaiting = () => {\n    this.props.waiting(this.getVideo());\n  };\n\n  public handleSeeking = () => {\n    this.props.seeking(this.getVideo());\n  };\n\n  public handleSeeked = () => {\n    this.props.seeked(this.getVideo());\n  };\n\n  public handleEmptied = () => {\n    this.props.reload(this.getVideo());\n  };\n\n  public handleLoadedMetaData = () => {\n    const {\n      currentVideoClip: { startTime },\n      reload\n    } = this.props;\n    if (startTime && startTime > 0) {\n      this.video.currentTime = startTime;\n    }\n    reload(this.getVideo());\n  };\n\n  public handleLoadedData = () => {\n    this.props.reload(this.getVideo());\n  };\n\n  public handleTimeUpdate = () => {\n    const {\n      reload,\n      currentVideoClip: { endTime }\n    } = this.props;\n    if (this.video.currentTime >= endTime) {\n      this.pause();\n    }\n    reload(this.getVideo());\n  };\n\n  public handleVolumeChange = () => {\n    this.props.changeVolume(this.getVideo());\n  };\n\n  public render() {\n    const {\n      autoPlay = false,\n      currentVideoClip: { src, endTime },\n      autoPlaylist,\n      provider: { currentTime, duration, fullscreen }\n    } = this.props;\n\n    return (\n      <VideoWrapperStyled\n        fullscreen={fullscreen}\n        show={\n          !showSpinnerNextVideo(currentTime, endTime, duration, autoPlaylist)\n        }\n      >\n        <VideoStyled\n          // tslint:disable-next-line:jsx-no-lambda\n          innerRef={(c: any) => {\n            this.video = c;\n          }}\n          autoPlay={autoPlay}\n          src={src}\n          playsinline={true}\n          preload=\"auto\"\n          onLoadStart={this.handleLoadStart}\n          onWaiting={this.handleWaiting}\n          onCanPlay={this.handleCanPlay}\n          onPlaying={this.handlePlaying}\n          onEnded={this.handleEnded}\n          onSeeking={this.handleSeeking}\n          onSeeked={this.handleSeeked}\n          onPlay={this.handlePlay}\n          onPause={this.handlePause}\n          onProgress={this.handleProgress}\n          onDurationChange={this.handleDurationChange}\n          onEmptied={this.handleEmptied}\n          onLoadedMetadata={this.handleLoadedMetaData}\n          onLoadedData={this.handleLoadedData}\n          onTimeUpdate={this.handleTimeUpdate}\n          onVolumeChange={this.handleVolumeChange}\n        >\n          {this.props.children}\n        </VideoStyled>\n      </VideoWrapperStyled>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}