{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\retube-reactApp\\\\src\\\\AppProvider.tsx\";\nimport * as React from \"react\";\nimport { findVideoClipIndexForId, copy, getStorage, setStorage, cleanDeprecatedStorage, arrayShuffle } from \"./utils\";\nimport db from \"./db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NAME_LOCALSTORAGE = \"dbYoutubeReact\";\nconst VERSION_LOCALSTORAGE = \"3\";\nconst KEY_LOCALSTORAGE = NAME_LOCALSTORAGE + VERSION_LOCALSTORAGE;\nconst Context = /*#__PURE__*/React.createContext({});\nexport default class AppProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = void 0;\n\n    this.resetDatabase = () => {\n      this.setState({\n        playlist: copy(arrayShuffle(db))\n      }, this.updateStorage);\n    };\n\n    this.setIdVideo = idVideo => {\n      this.setState({\n        idVideo\n      });\n    };\n\n    this.setInFullPlayer = inFullPlayer => {\n      this.setState({\n        inFullPlayer\n      });\n    };\n\n    this.removePlaylistItem = id => {\n      const playlist = this.state.playlist.filter(item => item.id !== id);\n      this.setState({\n        playlist\n      }, this.updateStorage);\n    };\n\n    this.addPlaylistItem = videoClip => {\n      const list = this.state.playlist.slice();\n      list.push(videoClip);\n      this.setState({\n        playlist: list\n      }, this.updateStorage);\n    };\n\n    this.updatePlaylistItem = (id, videoClip) => {\n      const playlist = this.state.playlist.slice();\n      const index = findVideoClipIndexForId(playlist, id);\n      playlist[index] = { ...playlist[index],\n        ...videoClip\n      };\n      this.setState({\n        playlist\n      }, this.updateStorage);\n    };\n\n    this.setRepeat = repeat => {\n      this.setState({\n        repeat\n      }, this.updateStorage);\n    };\n\n    this.setRandom = random => {\n      this.setState({\n        random\n      }, this.updateStorage);\n    };\n\n    this.setAutoPlaylist = autoPlaylist => {\n      this.setState({\n        autoPlaylist\n      }, this.updateStorage);\n    };\n\n    this.setTheaterMode = theaterMode => {\n      this.setState({\n        theaterMode\n      }, this.updateStorage);\n    };\n\n    this.updateStorage = () => {\n      setStorage(KEY_LOCALSTORAGE, this.state);\n    };\n\n    let state;\n    const cacheState = getStorage(KEY_LOCALSTORAGE);\n    cleanDeprecatedStorage(NAME_LOCALSTORAGE, VERSION_LOCALSTORAGE);\n\n    if (cacheState) {\n      state = { ...cacheState,\n        idVideo: \"\"\n      };\n    } else {\n      state = {\n        autoPlaylist: true,\n        idVideo: \"\",\n        inFullPlayer: false,\n        playlist: copy(arrayShuffle(db)),\n        random: false,\n        repeat: false,\n        theaterMode: false\n      };\n      setStorage(KEY_LOCALSTORAGE, state);\n    }\n\n    this.state = state;\n  }\n\n  render() {\n    const value = { ...this.state,\n      addVideoClip: this.addPlaylistItem,\n      removePlaylistItem: this.removePlaylistItem,\n      resetDatabase: this.resetDatabase,\n      setAutoPlaylist: this.setAutoPlaylist,\n      setIdVideo: this.setIdVideo,\n      setInFullPlayer: this.setInFullPlayer,\n      setRandom: this.setRandom,\n      setRepeat: this.setRepeat,\n      setTheaterMode: this.setTheaterMode,\n      setVideoClip: this.updatePlaylistItem\n    };\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: value,\n      ...this.props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }, this);\n  }\n\n}\nAppProvider.Consumer = Context.Consumer;","map":{"version":3,"sources":["C:/gitHub/retube-reactApp/src/AppProvider.tsx"],"names":["React","findVideoClipIndexForId","copy","getStorage","setStorage","cleanDeprecatedStorage","arrayShuffle","db","NAME_LOCALSTORAGE","VERSION_LOCALSTORAGE","KEY_LOCALSTORAGE","Context","createContext","AppProvider","Component","constructor","props","state","resetDatabase","setState","playlist","updateStorage","setIdVideo","idVideo","setInFullPlayer","inFullPlayer","removePlaylistItem","id","filter","item","addPlaylistItem","videoClip","list","slice","push","updatePlaylistItem","index","setRepeat","repeat","setRandom","random","setAutoPlaylist","autoPlaylist","setTheaterMode","theaterMode","cacheState","render","value","addVideoClip","setVideoClip","Consumer"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { IVideoClip, IVideoClipOptional } from \"./components\";\r\nimport {\r\n  findVideoClipIndexForId,\r\n  copy,\r\n  getStorage,\r\n  setStorage,\r\n  cleanDeprecatedStorage,\r\n  arrayShuffle,\r\n} from \"./utils\";\r\nimport db from \"./db\";\r\n\r\nconst NAME_LOCALSTORAGE = \"dbYoutubeReact\";\r\nconst VERSION_LOCALSTORAGE = \"3\";\r\n\r\nconst KEY_LOCALSTORAGE = NAME_LOCALSTORAGE + VERSION_LOCALSTORAGE;\r\n\r\nconst Context = React.createContext({});\r\n\r\nexport interface IState {\r\n  idVideo: string;\r\n  inFullPlayer: boolean;\r\n  playlist: IVideoClip[];\r\n  autoPlaylist: boolean;\r\n  random: boolean;\r\n  repeat: boolean;\r\n  theaterMode: boolean; // TODO: theater Mode\r\n}\r\n\r\nexport interface IAppProvider extends IState {\r\n  resetDatabase: () => void;\r\n  removePlaylistItem: (id: string) => void;\r\n  setIdVideo: (idVideo: string) => void;\r\n  setInFullPlayer: (inFullPlayer: boolean) => void;\r\n  setVideoClip: (id: string, videoClip: IVideoClipOptional) => void;\r\n  addVideoClip: (videoClip: IVideoClip) => void;\r\n  setAutoPlaylist: (autoPlay: boolean) => void;\r\n  setRandom: (random: boolean) => void;\r\n  setRepeat: (repeat: boolean) => void;\r\n  setTheaterMode: (theaterMode: boolean) => void;\r\n}\r\n\r\nexport default class AppProvider extends React.Component<any, IState> {\r\n  public static Consumer = Context.Consumer;\r\n  state: IState;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let state: IState;\r\n\r\n    const cacheState = getStorage(KEY_LOCALSTORAGE);\r\n    cleanDeprecatedStorage(NAME_LOCALSTORAGE, VERSION_LOCALSTORAGE);\r\n    if (cacheState) {\r\n      state = {\r\n        ...cacheState,\r\n        idVideo: \"\",\r\n      };\r\n    } else {\r\n      state = {\r\n        autoPlaylist: true,\r\n        idVideo: \"\",\r\n        inFullPlayer: false,\r\n        playlist: copy(arrayShuffle(db)),\r\n        random: false,\r\n        repeat: false,\r\n        theaterMode: false,\r\n      };\r\n      setStorage(KEY_LOCALSTORAGE, state);\r\n    }\r\n    this.state = state;\r\n  }\r\n\r\n  public resetDatabase = () => {\r\n    this.setState(\r\n      {\r\n        playlist: copy(arrayShuffle(db)),\r\n      },\r\n      this.updateStorage\r\n    );\r\n  };\r\n\r\n  public setIdVideo = (idVideo: string) => {\r\n    this.setState({\r\n      idVideo,\r\n    });\r\n  };\r\n\r\n  public setInFullPlayer = (inFullPlayer: boolean) => {\r\n    this.setState({\r\n      inFullPlayer,\r\n    });\r\n  };\r\n\r\n  public removePlaylistItem = (id: string) => {\r\n    const playlist = this.state.playlist.filter((item) => item.id !== id);\r\n    this.setState({ playlist }, this.updateStorage);\r\n  };\r\n\r\n  public addPlaylistItem = (videoClip: IVideoClip) => {\r\n    const list = this.state.playlist.slice();\r\n    list.push(videoClip);\r\n\r\n    this.setState(\r\n      {\r\n        playlist: list,\r\n      },\r\n      this.updateStorage\r\n    );\r\n  };\r\n\r\n  public updatePlaylistItem = (id: string, videoClip: IVideoClipOptional) => {\r\n    const playlist = this.state.playlist.slice();\r\n    const index = findVideoClipIndexForId(playlist, id);\r\n    playlist[index] = {\r\n      ...playlist[index],\r\n      ...videoClip,\r\n    };\r\n\r\n    this.setState(\r\n      {\r\n        playlist,\r\n      },\r\n      this.updateStorage\r\n    );\r\n  };\r\n\r\n  public setRepeat = (repeat: boolean) => {\r\n    this.setState({ repeat }, this.updateStorage);\r\n  };\r\n\r\n  public setRandom = (random: boolean) => {\r\n    this.setState({ random }, this.updateStorage);\r\n  };\r\n\r\n  public setAutoPlaylist = (autoPlaylist: boolean) => {\r\n    this.setState({ autoPlaylist }, this.updateStorage);\r\n  };\r\n\r\n  public setTheaterMode = (theaterMode: boolean) => {\r\n    this.setState({ theaterMode }, this.updateStorage);\r\n  };\r\n\r\n  public render() {\r\n    const value: IAppProvider = {\r\n      ...this.state,\r\n      addVideoClip: this.addPlaylistItem,\r\n      removePlaylistItem: this.removePlaylistItem,\r\n      resetDatabase: this.resetDatabase,\r\n      setAutoPlaylist: this.setAutoPlaylist,\r\n      setIdVideo: this.setIdVideo,\r\n      setInFullPlayer: this.setInFullPlayer,\r\n      setRandom: this.setRandom,\r\n      setRepeat: this.setRepeat,\r\n      setTheaterMode: this.setTheaterMode,\r\n      setVideoClip: this.updatePlaylistItem,\r\n    };\r\n\r\n    return <Context.Provider value={value} {...this.props} />;\r\n  }\r\n\r\n  private updateStorage = () => {\r\n    setStorage(KEY_LOCALSTORAGE, this.state);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}