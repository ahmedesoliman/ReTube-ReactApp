{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\retube-reactApp\\\\src\\\\components\\\\Playlist\\\\Playlist.tsx\";\nimport * as React from \"react\";\nimport Item from \"./Item\";\nimport { PlaylistHeadStyled, PlaylistBodyStyled, PlaylistHeadItemStyled, PlaylistWrapper, PlaylistContainer } from \"./styles\";\nimport { isTypeEqual } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoClipContainer = props => props.children(props.id);\n_c = VideoClipContainer;\nexport const PlaylistHeader = props => /*#__PURE__*/_jsxDEV(PlaylistHeadItemStyled, {\n  children: props.children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 26,\n  columnNumber: 3\n}, this);\n_c2 = PlaylistHeader;\n\nconst Playlist = props => {\n  const renderHeader = () => {\n    const listPlaylistHeader = React.Children.toArray(props.children).filter(child => {\n      return isTypeEqual(child, PlaylistHeader);\n    });\n\n    if (listPlaylistHeader.length) {\n      return /*#__PURE__*/_jsxDEV(PlaylistHeadStyled, {\n        children: listPlaylistHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this);\n    }\n\n    return null;\n  };\n\n  const renderItemChildren = id => {\n    return React.Children.toArray(props.children).filter(child => {\n      return isTypeEqual(child, VideoClipContainer);\n    }).map(child => /*#__PURE__*/React.cloneElement(child, {\n      id\n    }));\n  };\n\n  const {\n    playlist = [],\n    onClick,\n    idSelected,\n    expand\n  } = props;\n  return /*#__PURE__*/_jsxDEV(PlaylistWrapper, {\n    expand: expand,\n    children: /*#__PURE__*/_jsxDEV(PlaylistContainer, {\n      children: [renderHeader(), /*#__PURE__*/_jsxDEV(PlaylistBodyStyled, {\n        expand: expand,\n        children: playlist.map((item, index) => /*#__PURE__*/_jsxDEV(Item, {\n          selected: idSelected,\n          index: index,\n          expand: expand,\n          ...item,\n          onClick: onClick,\n          children: renderItemChildren(item.id)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Playlist;\nexport default Playlist;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"VideoClipContainer\");\n$RefreshReg$(_c2, \"PlaylistHeader\");\n$RefreshReg$(_c3, \"Playlist\");","map":{"version":3,"sources":["C:/gitHub/retube-reactApp/src/components/Playlist/Playlist.tsx"],"names":["React","Item","PlaylistHeadStyled","PlaylistBodyStyled","PlaylistHeadItemStyled","PlaylistWrapper","PlaylistContainer","isTypeEqual","VideoClipContainer","props","children","id","PlaylistHeader","Playlist","renderHeader","listPlaylistHeader","Children","toArray","filter","child","length","renderItemChildren","map","cloneElement","playlist","onClick","idSelected","expand","item","index"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,sBAHF,EAIEC,eAJF,EAKEC,iBALF,QAMO,UANP;AAOA,SAASC,WAAT,QAA4B,aAA5B;;AAYA,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeD,KAAK,CAACE,EAArB,CAApC;KAAMH,kB;AAEb,OAAO,MAAMI,cAA8B,GAAGH,KAAK,iBACjD,QAAC,sBAAD;AAAA,YAAyBA,KAAK,CAACC;AAA/B;AAAA;AAAA;AAAA;AAAA,QADK;MAAME,c;;AAIb,MAAMC,QAA2B,GAAGJ,KAAK,IAAI;AAC3C,QAAMK,YAAY,GAAG,MAA0B;AAC7C,UAAMC,kBAAkB,GAAGf,KAAK,CAACgB,QAAN,CAAeC,OAAf,CAAuBR,KAAK,CAACC,QAA7B,EAAuCQ,MAAvC,CACxBC,KAAD,IAAgB;AACd,aAAOZ,WAAW,CAACY,KAAD,EAAQP,cAAR,CAAlB;AACD,KAHwB,CAA3B;;AAKA,QAAIG,kBAAkB,CAACK,MAAvB,EAA+B;AAC7B,0BAAO,QAAC,kBAAD;AAAA,kBAAqBL;AAArB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,WAAO,IAAP;AACD,GAVD;;AAYA,QAAMM,kBAAkB,GAAIV,EAAD,IAAgB;AACzC,WAAOX,KAAK,CAACgB,QAAN,CAAeC,OAAf,CAAuBR,KAAK,CAACC,QAA7B,EACJQ,MADI,CACIC,KAAD,IAAgB;AACtB,aAAOZ,WAAW,CAACY,KAAD,EAAQX,kBAAR,CAAlB;AACD,KAHI,EAIJc,GAJI,CAICH,KAAD,iBAAgBnB,KAAK,CAACuB,YAAN,CAAmBJ,KAAnB,EAA0B;AAAER,MAAAA;AAAF,KAA1B,CAJhB,CAAP;AAKD,GAND;;AAQA,QAAM;AAAEa,IAAAA,QAAQ,GAAG,EAAb;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,UAA1B;AAAsCC,IAAAA;AAAtC,MAAiDlB,KAAvD;AACA,sBACE,QAAC,eAAD;AAAiB,IAAA,MAAM,EAAEkB,MAAzB;AAAA,2BACE,QAAC,iBAAD;AAAA,iBACGb,YAAY,EADf,eAEE,QAAC,kBAAD;AAAoB,QAAA,MAAM,EAAEa,MAA5B;AAAA,kBACGH,QAAQ,CAACF,GAAT,CAAa,CAACM,IAAD,EAAOC,KAAP,kBACZ,QAAC,IAAD;AACE,UAAA,QAAQ,EAAEH,UADZ;AAEE,UAAA,KAAK,EAAEG,KAFT;AAIE,UAAA,MAAM,EAAEF,MAJV;AAAA,aAKMC,IALN;AAME,UAAA,OAAO,EAAEH,OANX;AAAA,oBAQGJ,kBAAkB,CAACO,IAAI,CAACjB,EAAN;AARrB,WAGOkB,KAHP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA3CD;;MAAMhB,Q;AA6CN,eAAeA,QAAf","sourcesContent":["import * as React from \"react\";\nimport { IVideoClip } from \"../types\";\nimport Item from \"./Item\";\nimport {\n  PlaylistHeadStyled,\n  PlaylistBodyStyled,\n  PlaylistHeadItemStyled,\n  PlaylistWrapper,\n  PlaylistContainer\n} from \"./styles\";\nimport { isTypeEqual } from \"../../utils\";\n\nexport interface IPropsExternal {\n  onClick?: (id: string) => void;\n  playlist?: IVideoClip[];\n  idSelected?: string;\n  expand?: boolean;\n  children?: any;\n}\n\nexport interface IProps extends IPropsExternal {}\n\nexport const VideoClipContainer = props => props.children(props.id);\n\nexport const PlaylistHeader: React.SFC<any> = props => (\n  <PlaylistHeadItemStyled>{props.children}</PlaylistHeadItemStyled>\n);\n\nconst Playlist: React.SFC<IProps> = props => {\n  const renderHeader = (): JSX.Element | null => {\n    const listPlaylistHeader = React.Children.toArray(props.children).filter(\n      (child: any) => {\n        return isTypeEqual(child, PlaylistHeader);\n      }\n    );\n    if (listPlaylistHeader.length) {\n      return <PlaylistHeadStyled>{listPlaylistHeader}</PlaylistHeadStyled>;\n    }\n    return null;\n  };\n\n  const renderItemChildren = (id: string) => {\n    return React.Children.toArray(props.children)\n      .filter((child: any) => {\n        return isTypeEqual(child, VideoClipContainer);\n      })\n      .map((child: any) => React.cloneElement(child, { id }));\n  };\n\n  const { playlist = [], onClick, idSelected, expand } = props;\n  return (\n    <PlaylistWrapper expand={expand}>\n      <PlaylistContainer>\n        {renderHeader()}\n        <PlaylistBodyStyled expand={expand}>\n          {playlist.map((item, index) => (\n            <Item\n              selected={idSelected}\n              index={index}\n              key={index}\n              expand={expand}\n              {...item}\n              onClick={onClick}\n            >\n              {renderItemChildren(item.id)}\n            </Item>\n          ))}\n        </PlaylistBodyStyled>\n      </PlaylistContainer>\n    </PlaylistWrapper>\n  );\n};\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}