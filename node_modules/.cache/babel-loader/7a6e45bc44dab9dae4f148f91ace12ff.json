{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\todolist-react\\\\src\\\\components\\\\FullVideo\\\\ProgressControl.tsx\";\nimport * as React from \"react\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport { ProgressControlStyled } from \"./styles\";\nimport { convertToTimeRange, convertToTime, formatTooltipRange } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SliderWithTooltip = createSliderWithTooltip(Slider);\n_c = SliderWithTooltip;\nexport default class PlayToggle extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      changed: false,\n      value: 1000\n    };\n\n    this.handleChange = value => {\n      this.setState({\n        changed: true,\n        value\n      });\n    };\n\n    this.handleChangeComplete = value => {\n      const {\n        provider: {\n          duration\n        },\n        currentVideoClip: {\n          startTime,\n          endTime\n        }\n      } = this.props;\n      const selectedTime = convertToTime(value, duration);\n      let seekTime;\n\n      if (selectedTime >= startTime && selectedTime <= endTime) {\n        seekTime = selectedTime;\n      } else if (selectedTime < startTime) {\n        seekTime = startTime;\n      } else if (selectedTime > endTime) {\n        seekTime = endTime;\n      }\n\n      this.props.video.seek(seekTime);\n      this.setState({\n        changed: false,\n        value\n      });\n    };\n  }\n\n  slideTime() {\n    const {\n      currentTime,\n      duration\n    } = this.props.provider;\n\n    if (this.state.changed) {\n      return this.state.value;\n    }\n\n    if (isNaN(duration) || duration === 0) {\n      return 0;\n    }\n\n    return convertToTimeRange(currentTime, duration);\n  }\n\n  render() {\n    const {\n      provider: {\n        duration,\n        editActive\n      },\n      currentVideoClip: {\n        startTime,\n        endTime\n      }\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(ProgressControlStyled, {\n      show: editActive && duration,\n      children: [/*#__PURE__*/_jsxDEV(Slider, {\n        max: 1000,\n        className: \"mark mark-start\",\n        value: convertToTimeRange(startTime, duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        max: 1000,\n        className: \"mark mark-end\",\n        value: convertToTimeRange(endTime, duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SliderWithTooltip, {\n        className: \"mark-progress\",\n        max: 1000,\n        value: this.slideTime(),\n        tipFormatter: formatTooltipRange(duration),\n        onChange: this.handleChange,\n        onAfterChange: this.handleChangeComplete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderWithTooltip\");","map":{"version":3,"sources":["C:/gitHub/todolist-react/src/components/FullVideo/ProgressControl.tsx"],"names":["React","Slider","createSliderWithTooltip","ProgressControlStyled","convertToTimeRange","convertToTime","formatTooltipRange","SliderWithTooltip","PlayToggle","Component","state","changed","value","handleChange","setState","handleChangeComplete","provider","duration","currentVideoClip","startTime","endTime","props","selectedTime","seekTime","video","seek","slideTime","currentTime","isNaN","render","editActive"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,OAAOC,MAAP,IAAiBC,uBAAjB,QAAgD,WAAhD;AACA,SAASC,qBAAT,QAAsC,UAAtC;AACA,SACEC,kBADF,EAEEC,aAFF,EAGEC,kBAHF,QAIO,aAJP;;AAMA,MAAMC,iBAAiB,GAAGL,uBAAuB,CAACD,MAAD,CAAjD;KAAMM,iB;AAWN,eAAe,MAAMC,UAAN,SAAyBR,KAAK,CAACS,SAA/B,CAAyD;AAAA;AAAA;AAAA,SAC/DC,KAD+D,GACvD;AACbC,MAAAA,OAAO,EAAE,KADI;AAEbC,MAAAA,KAAK,EAAE;AAFM,KADuD;;AAAA,SAiB/DC,YAjB+D,GAiB/CD,KAAD,IAAmB;AACvC,WAAKE,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA;AAAjB,OAAd;AACD,KAnBqE;;AAAA,SAqB/DG,oBArB+D,GAqBvCH,KAAD,IAAmB;AAC/C,YAAM;AACJI,QAAAA,QAAQ,EAAE;AAAEC,UAAAA;AAAF,SADN;AAEJC,QAAAA,gBAAgB,EAAE;AAAEC,UAAAA,SAAF;AAAaC,UAAAA;AAAb;AAFd,UAGF,KAAKC,KAHT;AAIA,YAAMC,YAAY,GAAGjB,aAAa,CAACO,KAAD,EAAQK,QAAR,CAAlC;AACA,UAAIM,QAAJ;;AACA,UAAID,YAAY,IAAIH,SAAhB,IAA6BG,YAAY,IAAIF,OAAjD,EAA0D;AACxDG,QAAAA,QAAQ,GAAGD,YAAX;AACD,OAFD,MAEO,IAAIA,YAAY,GAAGH,SAAnB,EAA8B;AACnCI,QAAAA,QAAQ,GAAGJ,SAAX;AACD,OAFM,MAEA,IAAIG,YAAY,GAAGF,OAAnB,EAA4B;AACjCG,QAAAA,QAAQ,GAAGH,OAAX;AACD;;AACD,WAAKC,KAAL,CAAWG,KAAX,CAAiBC,IAAjB,CAAsBF,QAAtB;AACA,WAAKT,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA;AAAlB,OAAd;AACD,KArCqE;AAAA;;AAM/Dc,EAAAA,SAAS,GAAG;AACjB,UAAM;AAAEC,MAAAA,WAAF;AAAeV,MAAAA;AAAf,QAA4B,KAAKI,KAAL,CAAWL,QAA7C;;AACA,QAAI,KAAKN,KAAL,CAAWC,OAAf,EAAwB;AACtB,aAAO,KAAKD,KAAL,CAAWE,KAAlB;AACD;;AACD,QAAIgB,KAAK,CAACX,QAAD,CAAL,IAAmBA,QAAQ,KAAK,CAApC,EAAuC;AACrC,aAAO,CAAP;AACD;;AACD,WAAOb,kBAAkB,CAACuB,WAAD,EAAcV,QAAd,CAAzB;AACD;;AAwBMY,EAAAA,MAAM,GAAG;AACd,UAAM;AACJb,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,QAAF;AAAYa,QAAAA;AAAZ,OADN;AAEJZ,MAAAA,gBAAgB,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAFd,QAGF,KAAKC,KAHT;AAKA,wBACE,QAAC,qBAAD;AAAuB,MAAA,IAAI,EAAES,UAAU,IAAIb,QAA3C;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,GAAG,EAAE,IADP;AAEE,QAAA,SAAS,EAAC,iBAFZ;AAGE,QAAA,KAAK,EAAEb,kBAAkB,CAACe,SAAD,EAAYF,QAAZ;AAH3B;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,MAAD;AACE,QAAA,GAAG,EAAE,IADP;AAEE,QAAA,SAAS,EAAC,eAFZ;AAGE,QAAA,KAAK,EAAEb,kBAAkB,CAACgB,OAAD,EAAUH,QAAV;AAH3B;AAAA;AAAA;AAAA;AAAA,cANF,eAWE,QAAC,iBAAD;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,GAAG,EAAE,IAFP;AAGE,QAAA,KAAK,EAAE,KAAKS,SAAL,EAHT;AAIE,QAAA,YAAY,EAAEpB,kBAAkB,CAACW,QAAD,CAJlC;AAKE,QAAA,QAAQ,EAAE,KAAKJ,YALjB;AAME,QAAA,aAAa,EAAE,KAAKE;AANtB;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AAnEqE","sourcesContent":["import * as React from \"react\";\nimport Video from \"./Video\";\n\nimport { IPropsChildrens as IPropsFromFullVideo } from \"./FullVideo\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport { ProgressControlStyled } from \"./styles\";\nimport {\n  convertToTimeRange,\n  convertToTime,\n  formatTooltipRange\n} from \"../../utils\";\n\nconst SliderWithTooltip = createSliderWithTooltip(Slider);\n\ninterface IState {\n  changed: boolean;\n  value: number;\n}\n\ninterface IProps extends IPropsFromFullVideo {\n  video: Video;\n}\n\nexport default class PlayToggle extends React.Component<IProps, IState> {\n  public state = {\n    changed: false,\n    value: 1000\n  };\n\n  public slideTime() {\n    const { currentTime, duration } = this.props.provider;\n    if (this.state.changed) {\n      return this.state.value;\n    }\n    if (isNaN(duration) || duration === 0) {\n      return 0;\n    }\n    return convertToTimeRange(currentTime, duration);\n  }\n\n  public handleChange = (value: number) => {\n    this.setState({ changed: true, value });\n  };\n\n  public handleChangeComplete = (value: number) => {\n    const {\n      provider: { duration },\n      currentVideoClip: { startTime, endTime }\n    } = this.props;\n    const selectedTime = convertToTime(value, duration);\n    let seekTime;\n    if (selectedTime >= startTime && selectedTime <= endTime) {\n      seekTime = selectedTime;\n    } else if (selectedTime < startTime) {\n      seekTime = startTime;\n    } else if (selectedTime > endTime) {\n      seekTime = endTime;\n    }\n    this.props.video.seek(seekTime);\n    this.setState({ changed: false, value });\n  };\n\n  public render() {\n    const {\n      provider: { duration, editActive },\n      currentVideoClip: { startTime, endTime }\n    } = this.props;\n\n    return (\n      <ProgressControlStyled show={editActive && duration}>\n        <Slider\n          max={1000}\n          className=\"mark mark-start\"\n          value={convertToTimeRange(startTime, duration)}\n        />\n        <Slider\n          max={1000}\n          className=\"mark mark-end\"\n          value={convertToTimeRange(endTime, duration)}\n        />\n        <SliderWithTooltip\n          className=\"mark-progress\"\n          max={1000}\n          value={this.slideTime()}\n          tipFormatter={formatTooltipRange(duration)}\n          onChange={this.handleChange}\n          onAfterChange={this.handleChangeComplete}\n        />\n      </ProgressControlStyled>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}