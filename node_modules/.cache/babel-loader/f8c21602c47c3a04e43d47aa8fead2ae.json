{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitHub\\\\todolist-react\\\\src\\\\components\\\\VideoPlayer\\\\VideoPlayer.tsx\";\nimport * as React from \"react\";\nimport Switch from \"rc-switch\";\nimport FullVideo from \"../FullVideo/FullVideo\";\nimport Playlist, { PlaylistHeader } from \"../Playlist/Playlist\";\nimport { PlaylistHeadButtonStyled, PlaylistSwitchStyled } from \"../Playlist/styles\";\nimport { VideoPlayStyled } from \"./styles\";\nimport { isTypeEqual, findVideoClipIndexForId, getPlaylistActions } from \"../../utils\";\nimport { LayoutFullVideo } from \"../styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VideoPlayer = props => {\n  const handleChangeTimeFragment = (startTime, endTime) => {\n    const {\n      onChangeVideoClip,\n      idSelected\n    } = props;\n    onChangeVideoClip(idSelected, {\n      startTime,\n      endTime\n    });\n  };\n\n  const handleClickPlaylistItem = id => {\n    const {\n      onChangeSelected\n    } = props;\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n    onChangeSelected(id);\n  };\n\n  const handlePlaylistAction = videoClip => {\n    const {\n      onChangeSelected\n    } = props;\n    onChangeSelected(videoClip.id);\n  };\n\n  const getPlaylistChildren = child => {\n    const {\n      onChangeAutoPlaylist,\n      repeat,\n      onChangeRepeat,\n      autoPlaylist,\n      random,\n      onChangeRandom\n    } = props;\n    const children = React.Children.toArray(child.props.children);\n    children.unshift( /*#__PURE__*/_jsxDEV(PlaylistHeader, {\n      children: [/*#__PURE__*/_jsxDEV(PlaylistSwitchStyled, {\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          checked: autoPlaylist,\n          onChange: onChangeAutoPlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" Autoplay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlaylistHeadButtonStyled, {\n        active: repeat,\n        onClick: onChangeRepeat.bind(null, !repeat),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-redo-alt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" Loop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlaylistHeadButtonStyled, {\n        active: random,\n        onClick: onChangeRandom.bind(null, !random),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this));\n    return children;\n  };\n\n  const renderChildren = () => {\n    const {\n      playlist,\n      idSelected,\n      autoPlaylist,\n      repeat,\n      random,\n      onChangeAutoPlaylist\n    } = props;\n    return React.Children.toArray(props.children).map(child => {\n      // Take all Playlist components\n      if (isTypeEqual(child, Playlist)) {\n        const newProps = {\n          children: getPlaylistChildren(child),\n          idSelected,\n          onClick: handleClickPlaylistItem,\n          playlist\n        };\n        return /*#__PURE__*/React.cloneElement(child, newProps);\n      } // Take all FullVideo components\n\n\n      if (isTypeEqual(child, FullVideo) || isTypeEqual(child, LayoutFullVideo)) {\n        const index = findVideoClipIndexForId(playlist, idSelected);\n        const {\n          nextVideoClip,\n          backVideoClip,\n          currentVideoClip\n        } = getPlaylistActions(index, playlist, repeat, random);\n        const newProps = {\n          autoPlay: true,\n          autoPlaylist: nextVideoClip ? autoPlaylist : false,\n          backVideoClip,\n          currentVideoClip,\n          nextVideoClip,\n          onChangeAutoPlaylist,\n          onChangeTimeFragment: handleChangeTimeFragment,\n          onClickPlaylistAction: handlePlaylistAction\n        };\n        return /*#__PURE__*/React.cloneElement(child, newProps);\n      }\n\n      return null;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(VideoPlayStyled, {\n    children: renderChildren()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 10\n  }, this);\n};\n\n_c = VideoPlayer;\nexport default VideoPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"sources":["C:/gitHub/todolist-react/src/components/VideoPlayer/VideoPlayer.tsx"],"names":["React","Switch","FullVideo","Playlist","PlaylistHeader","PlaylistHeadButtonStyled","PlaylistSwitchStyled","VideoPlayStyled","isTypeEqual","findVideoClipIndexForId","getPlaylistActions","LayoutFullVideo","VideoPlayer","props","handleChangeTimeFragment","startTime","endTime","onChangeVideoClip","idSelected","handleClickPlaylistItem","id","onChangeSelected","document","body","scrollTop","documentElement","handlePlaylistAction","videoClip","getPlaylistChildren","child","onChangeAutoPlaylist","repeat","onChangeRepeat","autoPlaylist","random","onChangeRandom","children","Children","toArray","unshift","bind","renderChildren","playlist","map","newProps","onClick","cloneElement","index","nextVideoClip","backVideoClip","currentVideoClip","autoPlay","onChangeTimeFragment","onClickPlaylistAction"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAEO,wBAFP;AAGA,OAAOC,QAAP,IAEEC,cAFF,QAGO,sBAHP;AAIA,SACEC,wBADF,EAEEC,oBAFF,QAGO,oBAHP;AAIA,SAASC,eAAT,QAAgC,UAAhC;AACA,SACEC,WADF,EAEEC,uBAFF,EAGEC,kBAHF,QAIO,aAJP;AAMA,SAASC,eAAT,QAAgC,WAAhC;;;AAqBA,MAAMC,WAA8B,GAAGC,KAAK,IAAI;AAC9C,QAAMC,wBAAwB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACvD,UAAM;AAAEC,MAAAA,iBAAF;AAAqBC,MAAAA;AAArB,QAAoCL,KAA1C;AACAI,IAAAA,iBAAiB,CAACC,UAAD,EAAa;AAAEH,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAb,CAAjB;AACD,GAHD;;AAKA,QAAMG,uBAAuB,GAAIC,EAAD,IAAgB;AAC9C,UAAM;AAAEC,MAAAA;AAAF,QAAuBR,KAA7B;AACAS,IAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0B,CAA1B;AACAF,IAAAA,QAAQ,CAACG,eAAT,CAAyBD,SAAzB,GAAqC,CAArC;AACAH,IAAAA,gBAAgB,CAACD,EAAD,CAAhB;AACD,GALD;;AAOA,QAAMM,oBAAoB,GAAIC,SAAD,IAA2B;AACtD,UAAM;AAAEN,MAAAA;AAAF,QAAuBR,KAA7B;AACAQ,IAAAA,gBAAgB,CAACM,SAAS,CAACP,EAAX,CAAhB;AACD,GAHD;;AAKA,QAAMQ,mBAAmB,GAAGC,KAAK,IAAI;AACnC,UAAM;AACJC,MAAAA,oBADI;AAEJC,MAAAA,MAFI;AAGJC,MAAAA,cAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,MALI;AAMJC,MAAAA;AANI,QAOFtB,KAPJ;AAQA,UAAMuB,QAAQ,GAAGpC,KAAK,CAACqC,QAAN,CAAeC,OAAf,CAAuBT,KAAK,CAAChB,KAAN,CAAYuB,QAAnC,CAAjB;AAEAA,IAAAA,QAAQ,CAACG,OAAT,eACE,QAAC,cAAD;AAAA,8BACE,QAAC,oBAAD;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEN,YAAjB;AAA+B,UAAA,QAAQ,EAAEH;AAAzC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,wBAAD;AACE,QAAA,MAAM,EAAEC,MADV;AAEE,QAAA,OAAO,EAAEC,cAAc,CAACQ,IAAf,CAAoB,IAApB,EAA0B,CAACT,MAA3B,CAFX;AAAA,gCAIE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAYE,QAAC,wBAAD;AACE,QAAA,MAAM,EAAEG,MADV;AAEE,QAAA,OAAO,EAAEC,cAAc,CAACK,IAAf,CAAoB,IAApB,EAA0B,CAACN,MAA3B,CAFX;AAAA,gCAIE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBA,WAAOE,QAAP;AACD,GAnCD;;AAqCA,QAAMK,cAAc,GAAG,MAAM;AAC3B,UAAM;AACJC,MAAAA,QADI;AAEJxB,MAAAA,UAFI;AAGJe,MAAAA,YAHI;AAIJF,MAAAA,MAJI;AAKJG,MAAAA,MALI;AAMJJ,MAAAA;AANI,QAOFjB,KAPJ;AASA,WAAOb,KAAK,CAACqC,QAAN,CAAeC,OAAf,CAAuBzB,KAAK,CAACuB,QAA7B,EAAuCO,GAAvC,CAA4Cd,KAAD,IAAgB;AAChE;AACA,UAAIrB,WAAW,CAACqB,KAAD,EAAQ1B,QAAR,CAAf,EAAkC;AAChC,cAAMyC,QAAwB,GAAG;AAC/BR,UAAAA,QAAQ,EAAER,mBAAmB,CAACC,KAAD,CADE;AAE/BX,UAAAA,UAF+B;AAG/B2B,UAAAA,OAAO,EAAE1B,uBAHsB;AAI/BuB,UAAAA;AAJ+B,SAAjC;AAMA,4BAAO1C,KAAK,CAAC8C,YAAN,CAAmBjB,KAAnB,EAA0Be,QAA1B,CAAP;AACD,OAV+D,CAYhE;;;AACA,UACEpC,WAAW,CAACqB,KAAD,EAAQ3B,SAAR,CAAX,IACAM,WAAW,CAACqB,KAAD,EAAQlB,eAAR,CAFb,EAGE;AACA,cAAMoC,KAAK,GAAGtC,uBAAuB,CAACiC,QAAD,EAAWxB,UAAX,CAArC;AAEA,cAAM;AACJ8B,UAAAA,aADI;AAEJC,UAAAA,aAFI;AAGJC,UAAAA;AAHI,YAIFxC,kBAAkB,CAACqC,KAAD,EAAQL,QAAR,EAAkBX,MAAlB,EAA0BG,MAA1B,CAJtB;AAMA,cAAMU,QAAyB,GAAG;AAChCO,UAAAA,QAAQ,EAAE,IADsB;AAEhClB,UAAAA,YAAY,EAAEe,aAAa,GAAGf,YAAH,GAAkB,KAFb;AAGhCgB,UAAAA,aAHgC;AAIhCC,UAAAA,gBAJgC;AAKhCF,UAAAA,aALgC;AAMhClB,UAAAA,oBANgC;AAOhCsB,UAAAA,oBAAoB,EAAEtC,wBAPU;AAQhCuC,UAAAA,qBAAqB,EAAE3B;AARS,SAAlC;AAWA,4BAAO1B,KAAK,CAAC8C,YAAN,CAAmBjB,KAAnB,EAA0Be,QAA1B,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KAvCM,CAAP;AAwCD,GAlDD;;AAoDA,sBAAO,QAAC,eAAD;AAAA,cAAkBH,cAAc;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA5GD;;KAAM7B,W;AA8GN,eAAeA,WAAf","sourcesContent":["import * as React from \"react\";\nimport Switch from \"rc-switch\";\nimport FullVideo, {\n  IExternalProps as IFullVideoProps\n} from \"../FullVideo/FullVideo\";\nimport Playlist, {\n  IPropsExternal as IPlaylistProps,\n  PlaylistHeader\n} from \"../Playlist/Playlist\";\nimport {\n  PlaylistHeadButtonStyled,\n  PlaylistSwitchStyled\n} from \"../Playlist/styles\";\nimport { VideoPlayStyled } from \"./styles\";\nimport {\n  isTypeEqual,\n  findVideoClipIndexForId,\n  getPlaylistActions\n} from \"../../utils\";\nimport { IVideoClip, IVideoClipOptional } from \"../types\";\nimport { LayoutFullVideo } from \"../styles\";\n\nexport interface IPropsExternal {\n  idSelected: string;\n  playlist: IVideoClip[];\n  repeat: boolean;\n  random: boolean;\n  autoPlaylist: boolean;\n  onChangeRandom: (random: boolean) => void;\n  onRemoveVideoClip: (id: string) => void;\n  onChangeRepeat: (repeat: boolean) => void;\n  onChangeAutoPlaylist: (autoPlay: boolean) => void;\n  onChangeSelected: (id: string) => void;\n  onChangeVideoClip: (id: string, playlist: IVideoClipOptional) => void;\n  children?: any;\n}\n\ninterface IProps extends IPropsExternal {\n  children?: React.ReactNode;\n}\n\nconst VideoPlayer: React.SFC<IProps> = props => {\n  const handleChangeTimeFragment = (startTime, endTime) => {\n    const { onChangeVideoClip, idSelected } = props;\n    onChangeVideoClip(idSelected, { startTime, endTime });\n  };\n\n  const handleClickPlaylistItem = (id: string) => {\n    const { onChangeSelected } = props;\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n    onChangeSelected(id);\n  };\n\n  const handlePlaylistAction = (videoClip: IVideoClip) => {\n    const { onChangeSelected } = props;\n    onChangeSelected(videoClip.id);\n  };\n\n  const getPlaylistChildren = child => {\n    const {\n      onChangeAutoPlaylist,\n      repeat,\n      onChangeRepeat,\n      autoPlaylist,\n      random,\n      onChangeRandom\n    } = props;\n    const children = React.Children.toArray(child.props.children);\n\n    children.unshift(\n      <PlaylistHeader>\n        <PlaylistSwitchStyled>\n          <Switch checked={autoPlaylist} onChange={onChangeAutoPlaylist} />\n          <span> Autoplay</span>\n        </PlaylistSwitchStyled>\n        <PlaylistHeadButtonStyled\n          active={repeat}\n          onClick={onChangeRepeat.bind(null, !repeat)}\n        >\n          <i className=\"fas fa-redo-alt\" />\n          <span> Loop</span>\n        </PlaylistHeadButtonStyled>\n        <PlaylistHeadButtonStyled\n          active={random}\n          onClick={onChangeRandom.bind(null, !random)}\n        >\n          <i className=\"fas fa-random\" />\n          <span> Random</span>\n        </PlaylistHeadButtonStyled>\n      </PlaylistHeader>\n    );\n\n    return children;\n  };\n\n  const renderChildren = () => {\n    const {\n      playlist,\n      idSelected,\n      autoPlaylist,\n      repeat,\n      random,\n      onChangeAutoPlaylist\n    } = props;\n\n    return React.Children.toArray(props.children).map((child: any) => {\n      // Take all Playlist components\n      if (isTypeEqual(child, Playlist)) {\n        const newProps: IPlaylistProps = {\n          children: getPlaylistChildren(child),\n          idSelected,\n          onClick: handleClickPlaylistItem,\n          playlist\n        };\n        return React.cloneElement(child, newProps);\n      }\n\n      // Take all FullVideo components\n      if (\n        isTypeEqual(child, FullVideo) ||\n        isTypeEqual(child, LayoutFullVideo)\n      ) {\n        const index = findVideoClipIndexForId(playlist, idSelected);\n\n        const {\n          nextVideoClip,\n          backVideoClip,\n          currentVideoClip\n        } = getPlaylistActions(index, playlist, repeat, random);\n\n        const newProps: IFullVideoProps = {\n          autoPlay: true,\n          autoPlaylist: nextVideoClip ? autoPlaylist : false,\n          backVideoClip,\n          currentVideoClip,\n          nextVideoClip,\n          onChangeAutoPlaylist,\n          onChangeTimeFragment: handleChangeTimeFragment,\n          onClickPlaylistAction: handlePlaylistAction\n        };\n\n        return React.cloneElement(child, newProps);\n      }\n      return null;\n    });\n  };\n\n  return <VideoPlayStyled>{renderChildren()}</VideoPlayStyled>;\n};\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}